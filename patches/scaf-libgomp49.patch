diff --git a/libgomp/loop.c b/libgomp/loop.c
index 65f3fe8..ae8e6b7 100644
--- a/libgomp/loop.c
+++ b/libgomp/loop.c
@@ -27,6 +27,7 @@
 #include <limits.h>
 #include <stdlib.h>
 #include "libgomp.h"
+#include <scaf.h>
 
 
 /* Initialize the given work share construct from the given arguments.  */
@@ -443,9 +444,20 @@ gomp_parallel_loop_start (void (*fn) (void *), void *data,
 {
   struct gomp_team *team;
 
-  num_threads = gomp_resolve_num_threads (num_threads, 0);
+  printf("**ALERT** SCAF at %s:%d\n", __FILE__, __LINE__);
+  //num_threads = gomp_resolve_num_threads (num_threads, 0);
+  num_threads = scaf_section_start((void*)(fn));
   team = gomp_new_team (num_threads);
   gomp_loop_init (&team->work_shares[0], start, end, incr, sched, chunk_size);
+
+  // Have SCAF fire off a ``training'' fork in order to gather timing
+  // information. SCAF then intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded, so as not to affect overall program progress
+  // too dramatically.
+  scaf_gomp_training_create(fn, data);
+
   gomp_team_start (fn, data, num_threads, flags, team);
 }
 
diff --git a/libgomp/parallel.c b/libgomp/parallel.c
index 40a1920..3758965 100644
--- a/libgomp/parallel.c
+++ b/libgomp/parallel.c
@@ -26,7 +26,7 @@
 
 #include "libgomp.h"
 #include <limits.h>
-
+#include <scaf.h>
 
 /* Determine the number of threads to be launched for a PARALLEL construct.
    This algorithm is explicitly described in OpenMP 3.0 section 2.4.1.
@@ -121,7 +121,17 @@ gomp_resolve_num_threads (unsigned specified, unsigned count)
 void
 GOMP_parallel_start (void (*fn) (void *), void *data, unsigned num_threads)
 {
-  num_threads = gomp_resolve_num_threads (num_threads, 0);
+  //num_threads = gomp_resolve_num_threads (num_threads, 0);
+  num_threads = scaf_section_start((void*)(fn));
+
+  // Have SCAF fire off a ``training'' fork in order to gather timing
+  // information. SCAF then intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded, so as not to affect overall program progress
+  // too dramatically.
+  scaf_gomp_training_create(fn, data);
+
   gomp_team_start (fn, data, num_threads, 0, gomp_new_team (num_threads));
 }
 
@@ -156,13 +166,24 @@ GOMP_parallel_end (void)
     }
   else
     gomp_team_end ();
+  scaf_section_end();
+  scaf_gomp_training_destroy();
 }
 ialias (GOMP_parallel_end)
 
 void
 GOMP_parallel (void (*fn) (void *), void *data, unsigned num_threads, unsigned int flags)
 {
-  num_threads = gomp_resolve_num_threads (num_threads, 0);
+  //num_threads = gomp_resolve_num_threads (num_threads, 0);
+  num_threads = scaf_section_start((void*)(fn));
+
+  // Have SCAF fire off a ``training'' fork in order to gather timing
+  // information. SCAF then intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded, so as not to affect overall program progress
+  // too dramatically.
+  scaf_gomp_training_create(fn, data);
   gomp_team_start (fn, data, num_threads, flags, gomp_new_team (num_threads));
   fn (data);
   ialias_call (GOMP_parallel_end) ();
diff --git a/libgomp/sections.c b/libgomp/sections.c
index fb746c7..230d555 100644
--- a/libgomp/sections.c
+++ b/libgomp/sections.c
@@ -25,6 +25,7 @@
 /* This file handles the SECTIONS construct.  */
 
 #include "libgomp.h"
+#include <scaf.h>
 
 
 /* Initialize the given work share construct from the given arguments.  */
@@ -136,9 +137,21 @@ GOMP_parallel_sections_start (void (*fn) (void *), void *data,
 {
   struct gomp_team *team;
 
-  num_threads = gomp_resolve_num_threads (num_threads, count);
+  printf("**ALERT** SCAF at %s:%d\n", __FILE__, __LINE__);
+  //num_threads = gomp_resolve_num_threads (num_threads, count);
+  num_threads = scaf_section_start((void*)(fn));
+
   team = gomp_new_team (num_threads);
   gomp_sections_init (&team->work_shares[0], count);
+
+  // Have SCAF fire off a ``training'' fork in order to gather timing
+  // information. SCAF then intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded, so as not to affect overall program progress
+  // too dramatically.
+  scaf_gomp_training_create(fn, data);
+
   gomp_team_start (fn, data, num_threads, 0, team);
 }
 
@@ -150,9 +163,21 @@ GOMP_parallel_sections (void (*fn) (void *), void *data,
 {
   struct gomp_team *team;
 
-  num_threads = gomp_resolve_num_threads (num_threads, count);
+  printf("**ALERT** SCAF at %s:%d\n", __FILE__, __LINE__);
+  //num_threads = gomp_resolve_num_threads (num_threads, count);
+  num_threads = scaf_section_start((void*)(fn));
+
   team = gomp_new_team (num_threads);
   gomp_sections_init (&team->work_shares[0], count);
+
+  // Have SCAF fire off a ``training'' fork in order to gather timing
+  // information. SCAF then intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded, so as not to affect overall program progress
+  // too dramatically.
+  scaf_gomp_training_create(fn, data);
+
   gomp_team_start (fn, data, num_threads, flags, team);
   fn (data);
   GOMP_parallel_end ();
