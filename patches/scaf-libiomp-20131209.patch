diff --git a/Makefile b/Makefile
index 27c68ce..4d37542 100644
--- a/Makefile
+++ b/Makefile
@@ -62,3 +62,11 @@ info:
 	@echo mic=$(mic)
 	@echo mode=$(mode)
 
+# added by tcreech for my specific setup (i.e., pls don't use this)
+install:
+	@echo "-------------------------------------------------------------------------------"
+	@echo "Installing built libiomp5.{so,dbg} into composer_xe*SCAF/lib/..."
+	@cp tmp/lrb_32e-rtl_5_nor_dyn.12.rel.40.c0.t0.knc.lin.off-tempo/libiomp5.so $(HOME)/micopt/stow/composer_xe_2013.5.192_compiler-SCAF/lib/
+	@cp tmp/lrb_32e-rtl_5_nor_dyn.12.rel.40.c0.t0.knc.lin.off-tempo/libiomp5.dbg $(HOME)/micopt/stow/composer_xe_2013.5.192_compiler-SCAF/lib/
+	@echo "Done!"
+
diff --git a/src/kmp.h b/src/kmp.h
index 4e7dec0..8e675fd 100644
--- a/src/kmp.h
+++ b/src/kmp.h
@@ -273,7 +273,8 @@ enum dynamic_mode {
 #endif /* USE_LOAD_BALANCE */
     dynamic_random,
     dynamic_thread_limit,
-    dynamic_max
+    dynamic_max,
+    dynamic_scaf
 };
 
 /* external schedule constants, duplicate enum omp_sched in omp.h in order to not include it here */
diff --git a/src/kmp_csupport.c b/src/kmp_csupport.c
index 0fcf09b..cfb9c19 100644
--- a/src/kmp_csupport.c
+++ b/src/kmp_csupport.c
@@ -40,6 +40,12 @@
 #include "kmp_itt.h"
 #include "kmp_error.h"
 
+extern "C"
+{
+#include <scaf.h>
+}
+extern int scaf_last_allocation;
+
 #define MAX_MESSAGE 512
 
 /* ------------------------------------------------------------------------ */
@@ -301,6 +307,56 @@ __kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask, ...)
     va_list     ap;
     va_start(   ap, microtask );
 
+    //SCAF: set up an ad-hoc structure to convert our functor to accept a
+    //single void pointer argument
+    struct squishedargs {
+      int argc;
+      void **args;
+      microtask_t microtask;
+      int gtid;
+      ident_t *loc;
+    };
+
+    //SCAF: collect arguments for the section/task itself
+    void* args[argc];
+    {
+       va_list ap_l;
+       va_start(ap_l, microtask);
+       void** argv = args;
+       int i;
+       for( i=argc-1; i >= 0; --i )
+          *argv++ = va_arg( ap_l, void * );
+    }
+
+    //SCAF: store all arguments for the functor into a single blob
+    struct squishedargs funcdata;
+    funcdata.argc = argc;
+    funcdata.args = args;
+    funcdata.microtask = microtask;
+    funcdata.gtid = gtid;
+    funcdata.loc = loc;
+
+    //SCAF: now describe a functor for passing to libscaf, which will
+    //eventually run the serialized section as local::serialexecute(&funcdata).
+    //Note that the entire experimental process will always just stop after
+    //this runs, so we needn't make any attempt to clean up afterward.
+    struct local
+    {
+       static void serialexecute(void *data){
+          struct squishedargs *fd = (struct squishedargs*)data;
+          __kmpc_serialized_parallel(fd->loc, fd->gtid);
+          __kmp_invoke_microtask(fd->microtask, fd->gtid, 0, fd->argc, fd->args);
+       }
+    };
+
+    //SCAF: Just to be clear, collect our usual fn, data pair.
+    void (*fn) (void*) = local::serialexecute;
+    void *data = &funcdata;
+
+    //SCAF: Re-using the GOMP port's create function, launch the experiment.
+    scaf_last_allocation = scaf_section_start((void*)microtask);
+    scaf_gomp_training_create(fn, data);
+
     __kmp_fork_call( loc, gtid, TRUE,
             argc,
             VOLATILE_CAST(microtask_t) microtask,
@@ -314,6 +370,11 @@ __kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask, ...)
             );
     __kmp_join_call( loc, gtid );
 
+    //SCAF: Record the section as ended and collect experiment results if
+    //necessary.
+    scaf_section_end();
+    scaf_gomp_training_destroy();
+
     va_end( ap );
   }
 }
@@ -1343,6 +1404,8 @@ ompc_set_dynamic( int flag )
 
     __kmp_save_internal_controls( thread );
 
+    if(!flag && __kmp_global.g.g_dynamic_mode == dynamic_scaf)
+       scaf_not_malleable();
     set__dynamic( thread, flag ? TRUE : FALSE );
 }
 
diff --git a/src/kmp_ftn_entry.h b/src/kmp_ftn_entry.h
index e7827bf..431cbbf 100644
--- a/src/kmp_ftn_entry.h
+++ b/src/kmp_ftn_entry.h
@@ -44,6 +44,11 @@
 
 #include "kmp_i18n.h"
 
+extern "C"
+{
+#include <scaf.h>
+}
+
 #ifdef __cplusplus
     extern "C" {
 #endif // __cplusplus
@@ -530,6 +535,8 @@ xexpand(FTN_SET_DYNAMIC)( int KMP_DEREF flag )
         __kmp_save_internal_controls( thread );
         set__dynamic( thread, KMP_DEREF flag ? TRUE : FALSE );
     #endif
+        if(!(KMP_DEREF flag) && __kmp_global.g.g_dynamic_mode == dynamic_scaf)
+           scaf_not_malleable();
 }
 
 
diff --git a/src/kmp_runtime.c b/src/kmp_runtime.c
index 659fe76..5ecdded 100644
--- a/src/kmp_runtime.c
+++ b/src/kmp_runtime.c
@@ -45,6 +45,12 @@
 #include "kmp_io.h"
 #include "kmp_error.h"
 
+extern "C"
+{
+#include <scaf.h>
+}
+int scaf_last_allocation = 0;
+
 /* these are temporary issues to be dealt with */
 #define KMP_USE_PRCTL 0
 #define KMP_USE_POOLED_ALLOC 0
@@ -2152,7 +2158,7 @@ __kmp_end_split_barrier( enum barrier_type bt, int gtid )
  */
 static int
 __kmp_reserve_threads( kmp_root_t *root, kmp_team_t *parent_team,
-   int master_tid, int set_nthreads
+   int master_tid, int set_nthreads, microtask_t microtask
 #if OMP_40_ENABLED
   , int enter_teams
 #endif /* OMP_40_ENABLED */
@@ -2236,6 +2242,28 @@ __kmp_reserve_threads( kmp_root_t *root, kmp_team_t *parent_team,
             }
         }
     }
+    else if ( __kmp_global.g.g_dynamic_mode == dynamic_scaf ) {
+#if KMP_MIC
+        new_nthreads = scaf_last_allocation*scaf_last_threads_per_core - __kmp_nth + (root->r.r_active ? 1
+          : root->r.r_hot_team->t.t_nproc);
+#else
+        new_nthreads = scaf_last_allocation - __kmp_nth + (root->r.r_active ? 1
+          : root->r.r_hot_team->t.t_nproc);
+#endif //KMP_MIC
+        if ( new_nthreads <= 1 ) {
+            KC_TRACE( 10, ( "__kmp_reserve_threads: T#%d thread limit reduced reservation to 1 thread\n",
+              master_tid ));
+            return 1;
+        }
+        if ( new_nthreads < set_nthreads ) {
+            KC_TRACE( 10, ( "__kmp_reserve_threads: T#%d thread limit reduced reservation to %d threads\n",
+              master_tid, new_nthreads ));
+        }
+        else if ( new_nthreads > set_nthreads ) {
+            KC_TRACE( 10, ( "__kmp_reserve_threads: T#%d thread limit increased reservation to %d threads\n",
+              master_tid, new_nthreads ));
+        }
+    }
     else {
         KMP_ASSERT( 0 );
     }
@@ -2567,7 +2595,7 @@ __kmp_fork_call(
     {
         nthreads = master_set_numthreads ?
             master_set_numthreads : get__nproc_2( parent_team, master_tid );
-        nthreads = __kmp_reserve_threads( root, parent_team, master_tid, nthreads
+        nthreads = __kmp_reserve_threads( root, parent_team, master_tid, nthreads, microtask
 #if OMP_40_ENABLED
         // AC: If we execute teams from parallel region (on host), then teams
         //     should be created but each can only have 1 thread if nesting is disabled.
@@ -2944,6 +2972,18 @@ __kmp_fork_call(
     KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:0) invoke microtask = %p\n",
                 gtid, team->t.t_id, team->t.t_pkfn ) );
 
+#if KMP_MIC
+    /* First, re-set our affinity in case it has changed. */
+    if(team->t.t_size_changed){
+        //printf("thread %d's affinity changed! (t_size_changed=%d)\n", gtid,
+        //      team->t.t_size_changed);
+        int i = (gtid + __kmp_affinity_offset) % __kmp_affinity_num_masks;
+        kmp_affin_mask_t *mask = KMP_CPU_INDEX(__kmp_affinity_masks, i);
+        KMP_CPU_COPY(master_th->th.th_affin_mask, mask);
+        __kmp_set_system_affinity(master_th->th.th_affin_mask, TRUE);
+    }
+#endif //KMP_MIC
+
     if (! team->t.t_invoke( gtid )) {
         KMP_ASSERT2( 0, "cannot invoke microtask for MASTER thread" );
     }
@@ -5849,6 +5889,30 @@ __kmp_allocate_team( kmp_root_t *root, int new_nproc, int max_nproc,
 #endif /* OMP_40_ENABLED */
         }
 
+#if KMP_MIC
+        /* Figure out new affinities, if necesssary, for SCAF. */
+
+        if(team -> t.t_size_changed == 1)
+        {
+              __kmpc_place_threads(scaf_last_allocation,
+                    scaf_last_threads_per_core,
+                    scaf_last_core_offset);
+
+              // reset affinity_masks
+              if (__kmp_affinity_masks != NULL) {
+                 __kmp_free(__kmp_affinity_masks);
+                 __kmp_affinity_masks = NULL;
+              }
+              // Tell __kmp_affinity_initialize() to ignore the master thread's
+              // current affinity
+              int respect_save = __kmp_affinity_respect_mask;
+              __kmp_affinity_respect_mask = 0;
+
+              __kmp_affinity_initialize();
+              __kmp_affinity_respect_mask = respect_save;
+        }
+#endif /* KMP_MIC */
+
         /* reallocate space for arguments if necessary */
         __kmp_alloc_argv_entries( argc, team, TRUE );
         team -> t.t_argc     = argc;
@@ -6571,6 +6635,16 @@ __kmp_launch_thread( kmp_info_t *this_thr )
         if ( TCR_SYNC_PTR(*pteam) && !TCR_4(__kmp_global.g.g_done) ) {
             /* we were just woken up, so run our new task */
             if ( TCR_SYNC_PTR((*pteam)->t.t_pkfn) != NULL ) {
+                /* First, re-set our affinity in case it has changed. */
+#if KMP_MIC
+               if((*pteam)->t.t_size_changed){
+                  int i = (gtid + __kmp_affinity_offset) % __kmp_affinity_num_masks;
+                  kmp_affin_mask_t *mask = KMP_CPU_INDEX(__kmp_affinity_masks, i);
+                  KMP_CPU_COPY(this_thr->th.th_affin_mask, mask);
+                  __kmp_set_system_affinity(this_thr->th.th_affin_mask, TRUE);
+               }
+#endif // KMP_MIC
+
                 int rc;
                 KA_TRACE( 20, ("__kmp_launch_thread: T#%d(%d:%d) invoke microtask = %p\n",
                     gtid, (*pteam)->t.t_id, __kmp_tid_from_gtid(gtid), (*pteam)->t.t_pkfn ));
diff --git a/src/kmp_settings.c b/src/kmp_settings.c
index 40c0499..1dac6f9 100644
--- a/src/kmp_settings.c
+++ b/src/kmp_settings.c
@@ -44,6 +44,10 @@
 #include "kmp_i18n.h"
 #include "kmp_io.h"
 
+extern "C"
+{
+#include <scaf.h>
+}
 
 static int __kmp_env_isDefined( char const * name );
 static int __kmp_env_toPrint( char const * name, int flag );
@@ -367,6 +371,8 @@ typedef struct __kmp_stg_fr_data    kmp_stg_fr_data_t;
 typedef void ( * kmp_stg_parse_func_t )( char const * name, char const * value, void * data );
 typedef void ( * kmp_stg_print_func_t )( kmp_str_buf_t * buffer, char const * name, void * data );
 
+static kmp_setting_t * __kmp_stg_find( char const * name );
+
 struct __kmp_setting {
     char const *         name;        // Name of setting (environment variable).
     kmp_stg_parse_func_t parse;       // Parser function.
@@ -3357,6 +3363,17 @@ __kmp_stg_parse_kmp_dynamic_mode( char const * name, char const * value, void *
     else if ( __kmp_str_match( "random", 1, value ) ) {
         __kmp_global.g.g_dynamic_mode = dynamic_random;
     }
+    else if ( __kmp_str_match( "scaf", 0, value ) ) {
+        __kmp_global.g.g_dynamic_mode = dynamic_scaf;
+        if(__kmp_stg_find("OMP_DYNAMIC")->set){
+           // If specified to "false", inform the SCAF daemon right away.
+           if(__kmp_global.g.g_dynamic == FALSE)
+              scaf_not_malleable();
+        } else {
+           // Change the default (if unspecified) to "true".
+           __kmp_global.g.g_dynamic = TRUE;
+        }
+    }
     else {
         KMP_WARNING( StgInvalidValue, name, value );
     }
diff --git a/src/makefile.mk b/src/makefile.mk
index dfebc10..05186c3 100644
--- a/src/makefile.mk
+++ b/src/makefile.mk
@@ -1057,6 +1057,8 @@ ifeq "$(os)" "win"
     objcopy = objcopy$(exe)
 endif
 
+objcopy = /usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objcopy
+
 # required/ is a directory containing OMP RTL object files and really required files from external
 # libraries. required/.obj is a flag. If this file present, it means all required objects already
 # in place. Note, required-objects.pl copies files to specified directory. It is necessary, because
@@ -1094,8 +1096,8 @@ endif
 
 stripped/$(lib_file) : unstripped/$(lib_file) $(dbg_file) stripped/.dir .rebuild
 	$(target)
-	objcopy --strip-debug $< $@.tmp
-	objcopy --add-gnu-debuglink=$(dbg_file) $@.tmp $@
+	/usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objcopy --strip-debug $< $@.tmp
+	/usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objcopy --add-gnu-debuglink=$(dbg_file) $@.tmp $@
 
 ifeq "$(os)" "mac"
 
@@ -1428,6 +1430,9 @@ ifneq "$(filter %-dyna win-%,$(os)-$(LINK_TYPE))" ""
                 td_exp += libc.so.6
                 td_exp += libdl.so.2
                 td_exp += libpthread.so.0
+                td_exp += libscaf.so.0
+                td_exp += libm.so.6
+                td_exp += libgcc_s.so.1
             endif
         endif
         ifeq "$(MIC_OS)" "bsd"
diff --git a/tools/check-instruction-set.pl b/tools/check-instruction-set.pl
index 0027965..8994735 100755
--- a/tools/check-instruction-set.pl
+++ b/tools/check-instruction-set.pl
@@ -155,7 +155,7 @@ sub check_file($;$$) {
     if ( "$mic_os" eq "bsd" ) {
         execute( [ "x86_64-freebsd-objdump", "-d", $file ], -stdout => \@bulk );
     } else {
-        execute( [ "objdump", "-d", $file ], -stdout => \@bulk );
+        execute( [ "/usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objdump", "-d", $file ], -stdout => \@bulk );
     }
 
     my $n = 0;
diff --git a/tools/common.inc b/tools/common.inc
index d9f0584..53eeef0 100644
--- a/tools/common.inc
+++ b/tools/common.inc
@@ -98,7 +98,7 @@ ifneq "$(mic)" "no"
     hask1om = $(shell if (objdump --help | grep -s k1om); then echo OK; else echo KO; fi)
     ifneq "$(hask1om)" "OK"
         # Appropriate binutils are not already set up, so try to add them from the default place.
-        micBinPath = /usr/linux-k1om-4.7/x86_64-k1om-linux/bin
+        micBinPath = /usr/linux-k1om-4.7/bin
         micBinPresent = $(shell if test -d $(micBinPath); then echo OK; else echo KO; fi)
         ifneq "$(micBinPresent)" "OK"
             # We can't find them in the normal place, so complain.
diff --git a/tools/lib/Uname.pm b/tools/lib/Uname.pm
index 7ee2181..710855f 100644
--- a/tools/lib/Uname.pm
+++ b/tools/lib/Uname.pm
@@ -117,6 +117,8 @@ if ( $^O =~ m/cygwin/i ) {
             # On some systems POSIX::uname() and Net::Domain::hostfqdn() reports different names.
             # Let us issue a warning if they significantly different. Names are insignificantly
             # different if POSIX::uname() matches the beginning of Net::Domain::hostfqdn().
+            $fqdn = "tempo.arc.nasa.gov" unless defined $fqdn;
+
             if (
                 $fqdn eq substr( $fqdn, 0, length( $fqdn ) )
                 &&
diff --git a/tools/src/common-rules.mk b/tools/src/common-rules.mk
index ddab086..b6805b0 100644
--- a/tools/src/common-rules.mk
+++ b/tools/src/common-rules.mk
@@ -149,7 +149,7 @@ expand-vars = $(perl) $(tools_dir)expand-vars.pl --strict $(ev-flags) $< $@
         # strip debug info in case it is requested (works for Linux* OS only)
         ifneq "$(dbg_strip)" ""
             ifeq "$(DEBUG_INFO)" "off"
-	        objcopy --strip-debug $@
+	        /usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objcopy --strip-debug $@
             endif
         endif
 
@@ -175,7 +175,7 @@ expand-vars = $(perl) $(tools_dir)expand-vars.pl --strict $(ev-flags) $< $@
 
 %.dbg : %$(dll) .rebuild
 	$(target)
-	objcopy --only-keep-debug $< $@ 
+	/usr/linux-k1om-4.7/bin/x86_64-k1om-linux-objcopy --only-keep-debug $< $@ 
 
 
 .PRECIOUS: %.res                       # Do not delete automatically created files.
