--- gcc-4.4.5.orig/libgomp/parallel.c	2009-04-09 19:23:07.000000000 -0400
+++ gcc-4.4.5/libgomp/parallel.c	2012-04-23 12:59:07.000000000 -0400
@@ -26,6 +26,30 @@
 
 #include "libgomp.h"
 #include <limits.h>
+#include <scaf.h>
+#include <assert.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/reg.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <sys/ptrace.h>
+#include <sys/syscall.h>
+#include <linux/ptrace.h>
+
+#if defined(__i386__)
+#define ORIG_ACCUM	(4 * ORIG_EAX)
+#define ARGREG	(4 * EBX)
+#elif defined(__x86_64__)
+#define ORIG_ACCUM	(8 * ORIG_RAX)
+#define ARGREG	(8 * RDI)
+#else
+#error unsupported architecture
+#endif
+
 
 
 /* Determine the number of threads to be launched for a PARALLEL construct.
@@ -104,7 +128,16 @@
 void
 GOMP_parallel_start (void (*fn) (void *), void *data, unsigned num_threads)
 {
-  num_threads = gomp_resolve_num_threads (num_threads, 0);
+  //num_threads = gomp_resolve_num_threads (num_threads, 0);
+  num_threads = scaf_section_start((void*)(fn));
+
+  // Have SCAF fire off an ``experimental'' fork in order to gather timing
+  // information. SCAF intercepts all system calls of the new process to
+  // prevent it from incorrectly affecting system state. Furthermore, the
+  // experiment will only be allowed to run for a specified maximum amount of
+  // time before it is concluded.
+  scaf_gomp_experiment_create(fn, data);
+
   gomp_team_start (fn, data, num_threads, gomp_new_team (num_threads));
 }
 
@@ -127,6 +160,7 @@
 	}
     }
   gomp_team_end ();
+  scaf_section_end();
 }
 
 
